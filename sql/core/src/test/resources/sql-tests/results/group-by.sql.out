-- Automatically generated by SQLQueryTestSuite
-- Number of queries: 46


-- !query 0
CREATE OR REPLACE TEMPORARY VIEW testData AS SELECT * FROM VALUES
(1, 1), (1, 2), (2, 1), (2, 2), (3, 1), (3, 2), (null, 1), (3, null), (null, null)
AS testData(a, b)
-- !query 0 schema
struct<>
-- !query 0 output



-- !query 1
SELECT a, COUNT(b) FROM testData
-- !query 1 schema
struct<>
-- !query 1 output
org.apache.spark.sql.AnalysisException
grouping expressions sequence is empty, and 'testdata.`a`' is not an aggregate function. Wrap '(count(testdata.`b`) AS `count(b)`)' in windowing function(s) or wrap 'testdata.`a`' in first() (or first_value) if you don't care which value you get.;


-- !query 2
SELECT COUNT(a), COUNT(b) FROM testData
-- !query 2 schema
struct<count(a):bigint,count(b):bigint>
-- !query 2 output
7	7


-- !query 3
SELECT a, COUNT(b) FROM testData GROUP BY a
-- !query 3 schema
struct<a:int,count(b):bigint>
-- !query 3 output
1	2
2	2
3	2
NULL	1


-- !query 4
SELECT a, COUNT(b) FROM testData GROUP BY b
-- !query 4 schema
struct<>
-- !query 4 output
org.apache.spark.sql.AnalysisException
expression 'testdata.`a`' is neither present in the group by, nor is it an aggregate function. Add to group by or wrap in first() (or first_value) if you don't care which value you get.;


-- !query 5
SELECT COUNT(a), COUNT(b) FROM testData GROUP BY a
-- !query 5 schema
struct<count(a):bigint,count(b):bigint>
-- !query 5 output
0	1
2	2
2	2
3	2


-- !query 6
SELECT 'foo', COUNT(a) FROM testData GROUP BY 1
-- !query 6 schema
struct<foo:string,count(a):bigint>
-- !query 6 output
foo	7


-- !query 7
SELECT 'foo' FROM testData WHERE a = 0 GROUP BY 1
-- !query 7 schema
struct<foo:string>
-- !query 7 output



-- !query 8
SELECT 'foo', APPROX_COUNT_DISTINCT(a) FROM testData WHERE a = 0 GROUP BY 1
-- !query 8 schema
struct<foo:string,approx_count_distinct(a):bigint>
-- !query 8 output



-- !query 9
SELECT 'foo', MAX(STRUCT(a)) FROM testData WHERE a = 0 GROUP BY 1
-- !query 9 schema
struct<foo:string,max(named_struct(a, a)):struct<a:int>>
-- !query 9 output



-- !query 10
SELECT a + b, COUNT(b) FROM testData GROUP BY a + b
-- !query 10 schema
struct<(a + b):int,count(b):bigint>
-- !query 10 output
2	1
3	2
4	2
5	1
NULL	1


-- !query 11
SELECT a + 2, COUNT(b) FROM testData GROUP BY a + 1
-- !query 11 schema
struct<>
-- !query 11 output
org.apache.spark.sql.AnalysisException
expression 'testdata.`a`' is neither present in the group by, nor is it an aggregate function. Add to group by or wrap in first() (or first_value) if you don't care which value you get.;


-- !query 12
SELECT a + 1 + 1, COUNT(b) FROM testData GROUP BY a + 1
-- !query 12 schema
struct<((a + 1) + 1):int,count(b):bigint>
-- !query 12 output
3	2
4	2
5	2
NULL	1


-- !query 13
SELECT SKEWNESS(a), KURTOSIS(a), MIN(a), MAX(a), AVG(a), VARIANCE(a), STDDEV(a), SUM(a), COUNT(a)
FROM testData
-- !query 13 schema
struct<skewness(CAST(a AS DOUBLE)):double,kurtosis(CAST(a AS DOUBLE)):double,min(a):int,max(a):int,avg(a):double,var_samp(CAST(a AS DOUBLE)):double,stddev_samp(CAST(a AS DOUBLE)):double,sum(a):bigint,count(a):bigint>
-- !query 13 output
-0.2723801058145729	-1.5069204152249134	1	3	2.142857142857143	0.8095238095238094	0.8997354108424372	15	7


-- !query 14
SELECT COUNT(DISTINCT b), COUNT(DISTINCT b, c) FROM (SELECT 1 AS a, 2 AS b, 3 AS c) GROUP BY a
-- !query 14 schema
struct<count(DISTINCT b):bigint,count(DISTINCT b, c):bigint>
-- !query 14 output
1	1


-- !query 15
SELECT a AS k, COUNT(b) FROM testData GROUP BY k
-- !query 15 schema
struct<k:int,count(b):bigint>
-- !query 15 output
1	2
2	2
3	2
NULL	1


-- !query 16
SELECT a AS k, COUNT(b) FROM testData GROUP BY k HAVING k > 1
-- !query 16 schema
struct<k:int,count(b):bigint>
-- !query 16 output
2	2
3	2


-- !query 17
SELECT COUNT(b) AS k FROM testData GROUP BY k
-- !query 17 schema
struct<>
-- !query 17 output
org.apache.spark.sql.AnalysisException
aggregate functions are not allowed in GROUP BY, but found count(testdata.`b`);


-- !query 18
CREATE OR REPLACE TEMPORARY VIEW testDataHasSameNameWithAlias AS SELECT * FROM VALUES
(1, 1, 3), (1, 2, 1) AS testDataHasSameNameWithAlias(k, a, v)
-- !query 18 schema
struct<>
-- !query 18 output



-- !query 19
SELECT k AS a, COUNT(v) FROM testDataHasSameNameWithAlias GROUP BY a
-- !query 19 schema
struct<>
-- !query 19 output
org.apache.spark.sql.AnalysisException
expression 'testdatahassamenamewithalias.`k`' is neither present in the group by, nor is it an aggregate function. Add to group by or wrap in first() (or first_value) if you don't care which value you get.;


-- !query 20
set spark.sql.groupByAliases=false
-- !query 20 schema
struct<key:string,value:string>
-- !query 20 output
spark.sql.groupByAliases	false


-- !query 21
SELECT a AS k, COUNT(b) FROM testData GROUP BY k
-- !query 21 schema
struct<>
-- !query 21 output
org.apache.spark.sql.AnalysisException
cannot resolve '`k`' given input columns: [testdata.a, testdata.b]; line 1 pos 47


-- !query 22
SELECT a, COUNT(1) FROM testData WHERE false GROUP BY a
-- !query 22 schema
struct<a:int,count(1):bigint>
-- !query 22 output



-- !query 23
SELECT COUNT(1) FROM testData WHERE false
-- !query 23 schema
struct<count(1):bigint>
-- !query 23 output
0


-- !query 24
SELECT 1 FROM (SELECT COUNT(1) FROM testData WHERE false) t
-- !query 24 schema
struct<1:int>
-- !query 24 output
1


-- !query 25
SELECT 1 from (
  SELECT 1 AS z,
  MIN(a.x)
  FROM (select 1 as x) a
  WHERE false
) b
where b.z != b.z
-- !query 25 schema
struct<1:int>
-- !query 25 output



-- !query 26
SELECT corr(DISTINCT x, y), corr(DISTINCT y, x), count(*)
  FROM (VALUES (1, 1), (2, 2), (2, 2)) t(x, y)
-- !query 26 schema
struct<corr(DISTINCT CAST(x AS DOUBLE), CAST(y AS DOUBLE)):double,corr(DISTINCT CAST(y AS DOUBLE), CAST(x AS DOUBLE)):double,count(1):bigint>
-- !query 26 output
1.0	1.0	3


-- !query 27
SELECT 1 FROM range(10) HAVING true
-- !query 27 schema
struct<1:int>
-- !query 27 output
1


-- !query 28
SELECT 1 FROM range(10) HAVING MAX(id) > 0
-- !query 28 schema
struct<1:int>
-- !query 28 output
1


-- !query 29
SELECT id FROM range(10) HAVING id > 0
-- !query 29 schema
struct<>
-- !query 29 output
org.apache.spark.sql.AnalysisException
grouping expressions sequence is empty, and '`id`' is not an aggregate function. Wrap '()' in windowing function(s) or wrap '`id`' in first() (or first_value) if you don't care which value you get.;


-- !query 30
CREATE OR REPLACE TEMPORARY VIEW test_agg AS SELECT * FROM VALUES
  (1, true), (1, false),
  (2, true),
  (3, false), (3, null),
  (4, null), (4, null),
  (5, null), (5, true), (5, false) AS test_agg(k, v)
-- !query 30 schema
struct<>
-- !query 30 output



-- !query 31
SELECT every(v), some(v), any(v) FROM test_agg WHERE 1 = 0
-- !query 31 schema
struct<every(v):boolean,some(v):boolean,any(v):boolean>
-- !query 31 output
NULL	NULL	NULL


-- !query 32
SELECT every(v), some(v), any(v) FROM test_agg WHERE k = 4
-- !query 32 schema
struct<every(v):boolean,some(v):boolean,any(v):boolean>
-- !query 32 output
NULL	NULL	NULL


-- !query 33
SELECT every(v), some(v), any(v) FROM test_agg WHERE k = 5
-- !query 33 schema
struct<every(v):boolean,some(v):boolean,any(v):boolean>
-- !query 33 output
false	true	true


-- !query 34
SELECT k, every(v), some(v), any(v) FROM test_agg GROUP BY k
-- !query 34 schema
struct<k:int,every(v):boolean,some(v):boolean,any(v):boolean>
-- !query 34 output
1	false	true	true
2	true	true	true
3	false	false	false
4	NULL	NULL	NULL
5	false	true	true


-- !query 35
SELECT k, every(v) FROM test_agg GROUP BY k HAVING every(v) = false
-- !query 35 schema
struct<k:int,every(v):boolean>
-- !query 35 output
1	false
3	false
5	false


-- !query 36
SELECT k, every(v) FROM test_agg GROUP BY k HAVING every(v) IS NULL
-- !query 36 schema
struct<k:int,every(v):boolean>
-- !query 36 output
4	NULL


-- !query 37
SELECT k,
       Every(v) AS every
FROM   test_agg
WHERE  k = 2
       AND v IN (SELECT Any(v)
                 FROM   test_agg
                 WHERE  k = 1)
GROUP  BY k
-- !query 37 schema
struct<k:int,every:boolean>
-- !query 37 output
2	true


-- !query 38
SELECT k,
       Every(v) AS every
FROM   test_agg
WHERE  k = 2
       AND v IN (SELECT Every(v)
                 FROM   test_agg
                 WHERE  k = 1)
GROUP  BY k
-- !query 38 schema
struct<k:int,every:boolean>
-- !query 38 output



-- !query 39
SELECT every(1)
-- !query 39 schema
struct<>
-- !query 39 output
org.apache.spark.sql.AnalysisException
cannot resolve 'every(1)' due to data type mismatch: Input to function 'every' should have been boolean, but it's [int].; line 1 pos 7


-- !query 40
SELECT some(1S)
-- !query 40 schema
struct<>
-- !query 40 output
org.apache.spark.sql.AnalysisException
cannot resolve 'some(1S)' due to data type mismatch: Input to function 'some' should have been boolean, but it's [smallint].; line 1 pos 7


-- !query 41
SELECT any(1L)
-- !query 41 schema
struct<>
-- !query 41 output
org.apache.spark.sql.AnalysisException
cannot resolve 'any(1L)' due to data type mismatch: Input to function 'any' should have been boolean, but it's [bigint].; line 1 pos 7


-- !query 42
SELECT every("true")
-- !query 42 schema
struct<>
-- !query 42 output
org.apache.spark.sql.AnalysisException
cannot resolve 'every('true')' due to data type mismatch: Input to function 'every' should have been boolean, but it's [string].; line 1 pos 7


-- !query 43
SELECT k, v, every(v) OVER (PARTITION BY k ORDER BY v) FROM test_agg
-- !query 43 schema
struct<k:int,v:boolean,every(v) OVER (PARTITION BY k ORDER BY v ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW):boolean>
-- !query 43 output
1	false	false
1	true	false
2	true	true
3	NULL	NULL
3	false	false
4	NULL	NULL
4	NULL	NULL
5	NULL	NULL
5	false	false
5	true	false


-- !query 44
SELECT k, v, some(v) OVER (PARTITION BY k ORDER BY v) FROM test_agg
-- !query 44 schema
struct<k:int,v:boolean,some(v) OVER (PARTITION BY k ORDER BY v ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW):boolean>
-- !query 44 output
1	false	false
1	true	true
2	true	true
3	NULL	NULL
3	false	false
4	NULL	NULL
4	NULL	NULL
5	NULL	NULL
5	false	false
5	true	true


-- !query 45
SELECT k, v, any(v) OVER (PARTITION BY k ORDER BY v) FROM test_agg
-- !query 45 schema
struct<k:int,v:boolean,any(v) OVER (PARTITION BY k ORDER BY v ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW):boolean>
-- !query 45 output
1	false	false
1	true	true
2	true	true
3	NULL	NULL
3	false	false
4	NULL	NULL
4	NULL	NULL
5	NULL	NULL
5	false	false
5	true	true
