-- Automatically generated by SQLQueryTestSuite
-- Number of queries: 42


-- !query 0
select to_json(named_struct('a', 1, 'b', 2))
-- !query 0 schema
struct<to_json(named_struct(a, 1, b, 2)):string>
-- !query 0 output
{"a":1,"b":2}


-- !query 1
select to_json(named_struct('time', to_timestamp('2015-08-26', 'yyyy-MM-dd')), map('timestampFormat', 'dd/MM/yyyy'))
-- !query 1 schema
struct<to_json(named_struct(time, to_timestamp('2015-08-26', 'yyyy-MM-dd'))):string>
-- !query 1 output
{"time":"26/08/2015"}


-- !query 2
select to_json(array(named_struct('a', 1, 'b', 2)))
-- !query 2 schema
struct<to_json(array(named_struct(a, 1, b, 2))):string>
-- !query 2 output
[{"a":1,"b":2}]


-- !query 3
select to_json(map(named_struct('a', 1, 'b', 2), named_struct('a', 1, 'b', 2)))
-- !query 3 schema
struct<to_json(map(named_struct(a, 1, b, 2), named_struct(a, 1, b, 2))):string>
-- !query 3 output
{"[1,2]":{"a":1,"b":2}}


-- !query 4
select to_json(map('a', named_struct('a', 1, 'b', 2)))
-- !query 4 schema
struct<to_json(map(a, named_struct(a, 1, b, 2))):string>
-- !query 4 output
{"a":{"a":1,"b":2}}


-- !query 5
select to_json(map('a', 1))
-- !query 5 schema
struct<to_json(map(a, 1)):string>
-- !query 5 output
{"a":1}


-- !query 6
select to_json(array(map('a',1)))
-- !query 6 schema
struct<to_json(array(map(a, 1))):string>
-- !query 6 output
[{"a":1}]


-- !query 7
select to_json(array(map('a',1), map('b',2)))
-- !query 7 schema
struct<to_json(array(map(a, 1), map(b, 2))):string>
-- !query 7 output
[{"a":1},{"b":2}]


-- !query 8
select to_json(named_struct('a', 1, 'b', 2), named_struct('mode', 'PERMISSIVE'))
-- !query 8 schema
struct<>
-- !query 8 output
org.apache.spark.sql.AnalysisException
Must use a map() function for options;; line 1 pos 7


-- !query 9
select to_json(named_struct('a', 1, 'b', 2), map('mode', 1))
-- !query 9 schema
struct<>
-- !query 9 output
org.apache.spark.sql.AnalysisException
A type of keys and values in map() must be string, but got map<string,int>;; line 1 pos 7


-- !query 10
select to_json()
-- !query 10 schema
struct<>
-- !query 10 output
org.apache.spark.sql.AnalysisException
Invalid number of arguments for function to_json. Expected: one of 1 and 2; Found: 0; line 1 pos 7


-- !query 11
select from_json('{"a":1}', 'a INT')
-- !query 11 schema
struct<from_json({"a":1}):struct<a:int>>
-- !query 11 output
{"a":1}


-- !query 12
select from_json('{"time":"26/08/2015"}', 'time Timestamp', map('timestampFormat', 'dd/MM/yyyy'))
-- !query 12 schema
struct<from_json({"time":"26/08/2015"}):struct<time:timestamp>>
-- !query 12 output
{"time":2015-08-26 00:00:00.0}


-- !query 13
select from_json('{"a":1}', 1)
-- !query 13 schema
struct<>
-- !query 13 output
org.apache.spark.sql.AnalysisException
Schema should be specified in DDL format as a string literal or output of the schema_of_json function instead of 1;; line 1 pos 7


-- !query 14
select from_json('{"a":1}', 'a InvalidType')
-- !query 14 schema
struct<>
-- !query 14 output
org.apache.spark.sql.AnalysisException

DataType invalidtype is not supported.(line 1, pos 2)

== SQL ==
a InvalidType
--^^^
; line 1 pos 7


-- !query 15
select from_json('{"a":1}', 'a INT', named_struct('mode', 'PERMISSIVE'))
-- !query 15 schema
struct<>
-- !query 15 output
org.apache.spark.sql.AnalysisException
Must use a map() function for options;; line 1 pos 7


-- !query 16
select from_json('{"a":1}', 'a INT', map('mode', 1))
-- !query 16 schema
struct<>
-- !query 16 output
org.apache.spark.sql.AnalysisException
A type of keys and values in map() must be string, but got map<string,int>;; line 1 pos 7


-- !query 17
select from_json()
-- !query 17 schema
struct<>
-- !query 17 output
org.apache.spark.sql.AnalysisException
Invalid number of arguments for function from_json. Expected: one of 2 and 3; Found: 0; line 1 pos 7


-- !query 18
SELECT json_tuple('{"a" : 1, "b" : 2}', CAST(NULL AS STRING), 'b', CAST(NULL AS STRING), 'a')
-- !query 18 schema
struct<c0:string,c1:string,c2:string,c3:string>
-- !query 18 output
NULL	2	NULL	1


-- !query 19
CREATE TEMPORARY VIEW jsonTable(jsonField, a) AS SELECT * FROM VALUES ('{"a": 1, "b": 2}', 'a')
-- !query 19 schema
struct<>
-- !query 19 output



-- !query 20
SELECT json_tuple(jsonField, 'b', CAST(NULL AS STRING), a) FROM jsonTable
-- !query 20 schema
struct<c0:string,c1:string,c2:string>
-- !query 20 output
2	NULL	1


-- !query 21
DROP VIEW IF EXISTS jsonTable
-- !query 21 schema
struct<>
-- !query 21 output



-- !query 22
select from_json('{"a":1, "b":2}', 'map<string, int>')
-- !query 22 schema
struct<entries:map<string,int>>
-- !query 22 output
{"a":1,"b":2}


-- !query 23
select from_json('{"a":1, "b":"2"}', 'struct<a:int,b:string>')
-- !query 23 schema
struct<from_json({"a":1, "b":"2"}):struct<a:int,b:string>>
-- !query 23 output
{"a":1,"b":"2"}


-- !query 24
select schema_of_json('{"c1":0, "c2":[1]}')
-- !query 24 schema
struct<schema_of_json({"c1":0, "c2":[1]}):string>
-- !query 24 output
struct<c1:bigint,c2:array<bigint>>


-- !query 25
select from_json('{"c1":[1, 2, 3]}', schema_of_json('{"c1":[0]}'))
-- !query 25 schema
struct<from_json({"c1":[1, 2, 3]}):struct<c1:array<bigint>>>
-- !query 25 output
{"c1":[1,2,3]}


-- !query 26
select from_json('[1, 2, 3]', 'array<int>')
-- !query 26 schema
struct<from_json([1, 2, 3]):array<int>>
-- !query 26 output
[1,2,3]


-- !query 27
select from_json('[1, "2", 3]', 'array<int>')
-- !query 27 schema
struct<from_json([1, "2", 3]):array<int>>
-- !query 27 output
NULL


-- !query 28
select from_json('[1, 2, null]', 'array<int>')
-- !query 28 schema
struct<from_json([1, 2, null]):array<int>>
-- !query 28 output
[1,2,null]


-- !query 29
select from_json('[{"a": 1}, {"a":2}]', 'array<struct<a:int>>')
-- !query 29 schema
struct<from_json([{"a": 1}, {"a":2}]):array<struct<a:int>>>
-- !query 29 output
[{"a":1},{"a":2}]


-- !query 30
select from_json('{"a": 1}', 'array<struct<a:int>>')
-- !query 30 schema
struct<from_json({"a": 1}):array<struct<a:int>>>
-- !query 30 output
[{"a":1}]


-- !query 31
select from_json('[null, {"a":2}]', 'array<struct<a:int>>')
-- !query 31 schema
struct<from_json([null, {"a":2}]):array<struct<a:int>>>
-- !query 31 output
[null,{"a":2}]


-- !query 32
select from_json('[{"a": 1}, {"b":2}]', 'array<map<string,int>>')
-- !query 32 schema
struct<from_json([{"a": 1}, {"b":2}]):array<map<string,int>>>
-- !query 32 output
[{"a":1},{"b":2}]


-- !query 33
select from_json('[{"a": 1}, 2]', 'array<map<string,int>>')
-- !query 33 schema
struct<from_json([{"a": 1}, 2]):array<map<string,int>>>
-- !query 33 output
NULL


-- !query 34
select to_json(array('1', '2', '3'))
-- !query 34 schema
struct<to_json(array(1, 2, 3)):string>
-- !query 34 output
["1","2","3"]


-- !query 35
select to_json(array(array(1, 2, 3), array(4)))
-- !query 35 schema
struct<to_json(array(array(1, 2, 3), array(4))):string>
-- !query 35 output
[[1,2,3],[4]]


-- !query 36
select schema_of_json('{"c1":1}', map('primitivesAsString', 'true'))
-- !query 36 schema
struct<schema_of_json({"c1":1}):string>
-- !query 36 output
struct<c1:string>


-- !query 37
select schema_of_json('{"c1":01, "c2":0.1}', map('allowNumericLeadingZeros', 'true', 'prefersDecimal', 'true'))
-- !query 37 schema
struct<schema_of_json({"c1":01, "c2":0.1}):string>
-- !query 37 output
struct<c1:bigint,c2:decimal(1,1)>


-- !query 38
select schema_of_json(null)
-- !query 38 schema
struct<>
-- !query 38 output
org.apache.spark.sql.AnalysisException
cannot resolve 'schema_of_json(NULL)' due to data type mismatch: The input json should be a string literal and not null; however, got NULL.; line 1 pos 7


-- !query 39
CREATE TEMPORARY VIEW jsonTable(jsonField, a) AS SELECT * FROM VALUES ('{"a": 1, "b": 2}', 'a')
-- !query 39 schema
struct<>
-- !query 39 output



-- !query 40
SELECT schema_of_json(jsonField) FROM jsonTable
-- !query 40 schema
struct<>
-- !query 40 output
org.apache.spark.sql.AnalysisException
cannot resolve 'schema_of_json(jsontable.`jsonField`)' due to data type mismatch: The input json should be a string literal and not null; however, got jsontable.`jsonField`.; line 1 pos 7


-- !query 41
DROP VIEW IF EXISTS jsonTable
-- !query 41 schema
struct<>
-- !query 41 output

