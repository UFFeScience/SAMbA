package br.uff.spark.advancedpipe

import java.io.File
import java.util

import scala.collection.JavaConverters._

/* Source code generated by Lombok */
class FileGroupTemplateBuilder() {

  private var baseDir: File = null
  private var files: java.util.List[String] = null
  private var extrasInfo: java.util.Map[String, Any] = null
  private var name: String = null

  def baseDir(baseDir: File): FileGroupTemplateBuilder = {
    this.baseDir = baseDir
    this
  }

  def file(file: String): FileGroupTemplateBuilder = {
    if (this.files == null) this.files = new util.ArrayList[String]
    this.files.add(file)
    this
  }

  def files(files: Seq[String]): FileGroupTemplateBuilder = {
    if (this.files == null) this.files = new util.ArrayList[String]
    this.files.addAll(files.asJava)
    this
  }

  def files(files: util.Collection[_ <: String]): FileGroupTemplateBuilder = {
    if (this.files == null) this.files = new util.ArrayList[String]
    this.files.addAll(files)
    this
  }

  def clearFiles: FileGroupTemplateBuilder = {
    if (this.files != null) this.files.clear()
    this
  }

  def extraInfo(key: String, value: Any): FileGroupTemplateBuilder = {
    if (this.extrasInfo == null) this.extrasInfo = new util.HashMap[String, Any]()
    this.extrasInfo.put(key, value)
    this
  }

  def extraInfos(extraInfos: Map[String, Any]): FileGroupTemplateBuilder = {
    if (this.extrasInfo == null) this.extrasInfo = new util.HashMap[String, Any]()
    this.extrasInfo.putAll(extraInfos.asJava)
    this
  }

  def extraInfos(extraInfos: util.Map[String, Any]): FileGroupTemplateBuilder = {
    if (this.extrasInfo == null) this.extrasInfo = new util.HashMap[String, Any]()
    this.extrasInfo.putAll(extraInfos)
    this
  }

  def clearExtraInfos: FileGroupTemplateBuilder = {
    if (this.extrasInfo != null) this.extrasInfo.clear
    this
  }

  def name(name: String): FileGroupTemplateBuilder = {
    this.name = name
    this
  }

  private def toFile(path: String): File = {
    if (baseDir == null) return new File(path)
    new File(baseDir, path)
  }

  def build: FileGroupTemplate = {
    var files: List[File] = null
    if (this.files == null) 0
    else {
      this.files.size
    } match {
      case 0 =>
        files = List()
      case 1 =>
        files = List(toFile(this.files.get(0)))
      case _ =>
        files = this.files.iterator().asScala.map(fileName => this.toFile(fileName)).toList
    }
    var extrasInfo: Map[String, Any] = null
    if (this.extrasInfo == null) 0
    else {
      this.extrasInfo.size
    } match {
      case 0 =>
        extrasInfo = Map()
      case _ =>
        extrasInfo = this.extrasInfo.asScala.toMap
    }
    new FileGroupTemplate(this.baseDir, files, extrasInfo)
  }

  override def toString: String = "FileGroupTemplateBuilder(baseDir=" + this.baseDir + ", files=" + this.files + ", extrasInfo=" + this.extrasInfo + ")"
}